# Our future selves will thank us for noting what cable goes where and labeling the relevant network interfaces if it isn't already done out-of-the-box.
define WANLINK = enp2s0
define LANLINK = br0
define LANLINKGUEST = br1
define HOGWARTS = 10.1.1.166
define NM4PVTDRV = 10.1.1.113
define PUBLICIP = 92.221.121.3

# We never expect to see the following address ranges on the Internet
define BOGONS4 = { 0.0.0.0/8, 10.0.0.0/8, 10.64.0.0/10, 127.0.0.0/8, 127.0.53.53, 169.254.0.0/16, 172.16.0.0/12, 192.0.0.0/24, 192.0.2.0/24, 192.168.0.0/16, 198.18.0.0/15, 198.51.100.0/24, 203.0.113.0/24, 224.0.0.0/4, 240.0.0.0/4, 255.255.255.255/32 }

# The actual firewall starts here
table inet filter {
	# Additional rules for traffic from the Internet
	chain inbound_world {
		# Drop obviously spoofed inbound traffic
		ip saddr { $BOGONS4 } counter drop
	}
	# Additional rules for traffic from our private network
	chain inbound_private {
		# We want to allow remote access over ssh, incoming DNS traffic, and incoming DHCP traffic
		ip protocol . th dport vmap { tcp . 22 : accept, udp . 53 : accept, tcp . 53 : accept, udp . 67 : accept }
		# ICMP is - mostly - our friend. Limit incoming pings somewhat but allow necessary information.
		# icmp type echo-request counter limit rate 5/second accept
		ip protocol icmp icmp type { destination-unreachable, echo-reply, echo-request, source-quench, time-exceeded } accept
	}
	chain inbound_guest {
		ip protocol . th dport vmap { udp . 53 : accept, tcp . 53 : accept, udp . 67 : accept }
	}
	# Our funnel for inbound traffic from any network
	chain inbound {
		# Default Deny
		type filter hook input priority 0; policy drop;
		# Allow established and related connections: Allows Internet servers to respond to requests from our Internal network
		ct state vmap { established : accept, related : accept, invalid : drop} counter

		# Drop obviously spoofed loopback traffic
		iifname "lo" ip daddr != 127.0.0.0/8 drop

		# Separate rules for traffic from Internet and from the internal network
		iifname vmap { lo: accept, $WANLINK : jump inbound_world, $LANLINK : jump inbound_private, $LANLINKGUEST : jump inbound_guest }
	}
	# Rules for sending traffic from one network interface to another
	chain forward {
		# Default deny, again
		type filter hook forward priority 0; policy drop;
		# Accept established and related traffic
		ct state vmap { established : accept, related : accept, invalid : drop }

		iifname $LANLINKGUEST oifname $LANLINK ip daddr $HOGWARTS tcp dport {53, 32400} ct state new  counter accept
		iifname $LANLINKGUEST oifname $LANLINK ip daddr $HOGWARTS udp dport 53 ct state new  counter accept
		iifname $LANLINKGUEST oifname $LANLINK counter drop

		# Let traffic from this router and from the Internal network get out onto the Internet
		iifname { lo, $LANLINK, $LANLINKGUEST } accept
		# Only allow dnat'ed inbound traffic from the Internet
		# src https://serverfault.com/a/1067628
		ct status dnat accept
	}
}

# Network address translation: What allows us to glue together a private network with the Internet even though we only have one routable address, as per IPv4 limitations
table ip nat {
	chain  prerouting {
		type nat hook prerouting priority -100;
		# Send specific inbound traffic to our internal services
		# iifname $WANLINK . dport . dnat to map {tcp . http . $NM4PVTDRV, udp . 51820 . $HOGWARTS}
		iifname $WANLINK tcp dport http dnat to $NM4PVTDRV
		iifname $WANLINK udp dport 51820 dnat to $HOGWARTS
		# Send traffic like http://PUBLICIP/ right to the destination (src: https://serverfault.com/a/1016412)
		iifname $LANLINK ip daddr $PUBLICIP tcp dport http counter dnat to $NM4PVTDRV
		iifname $LANLINK ip daddr $PUBLICIP udp dport 51820 counter dnat to $HOGWARTS
	}
	chain postrouting {
		type nat hook postrouting priority 100; policy accept;
		# The traffic from local interface to our public-ip needs to be masqueraded otherwise, it
		# wont get reply (src: https://serverfault.com/a/1016412)
		# if its been dnat'ed we prolly can masquerade it
		iifname $LANLINK ct status dnat counter masquerade
		# Pretend that outbound traffic originates in this router so that Internet servers know where to send responses
		oif $WANLINK masquerade
	}
}
# table netdev firewall {
#   chain ingress {
#     type filter hook ingress device $LANLINKGUEST priority 0; policy drop;
#     log
#   }
# }